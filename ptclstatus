#!/usr/bin/python
import os, time, urllib, json, time

# function to return the connection status, in json
def get_connection_status():
	response = urllib.urlopen("http://192.168.10.1/port_link_status")
	data = json.loads(response.read())
	return data

# function to see if connected (dsl) or not
def get_dsl_status(json_response):
	if "status" in json_response:
		return json_response["status"]
	else:
		return "bad_response"
		
# function to see if dsl cable is plugged in
def get_dsl_cable_plugged_status(json_response):
	if "dsl" in json_response:
		return json_response["dsl"]
	else:
		return "bad_response"	
		
# function to get name of currently connected network
def get_network_name():
	wifi_name = os.popen('iwgetid -r').read()
	# remove \n from end
	if wifi_name[len(wifi_name)-1] == '\n':
		wifi_name = wifi_name[0:len(wifi_name)-1]
	return wifi_name

# sends a notification
def send_notification (dsl, connected, error):
	if error:
		os.popen("notify-send 'PTCL Modem Status' 'Unexpected error in response' --icon=network-error-symbolic");
	else:
		dslString = "DSL Cable: "
		if dsl:
			dslString += "Plugged"
		else:
			dslString += "Unplugged"
		connectionString = "Status: "
		iconString = "network-wired-connected-symbolic"
		if connected:
			connectionString += "Connected"
		else:
			connectionString += "Disconnected"
			iconString = "network-wired-disconnected-symbolic"
		os.popen("notify-send 'PTCL Modem Status' '"+connectionString+"\n"+dslString+"' --icon="+iconString)

# list of wifi networks on which this script should assume that it's a PTCL modem on 192.168.10.1
ptcl_networks = ["PTCL-BB", "PTCL-BB667"]

previous_dsl = False
previous_conn = False
previous_error = False
# start the loop
while True:
	# get a response
	try:
		print ("getting /port_link_status ...")
		if get_network_name() in ptcl_networks:
			json_resp = get_connection_status()
			conn = get_dsl_status(json_resp)
			dsl = get_dsl_cable_plugged_status(json_resp)
			error = False
			print "status received: \nConnection: " + conn + "\nDSL cable: " + dsl
			# check if error
			if dsl == "bad_response" or conn == "bad_response":
				error = True
			if dsl == "1":
				dsl = True
			else:
				dsl = False
			if conn == "Connected":
				conn = True;
			elif conn == "Disconnected":
				conn = False
			else:
				error = True
			if error != previous_error or dsl != previous_dsl or conn != previous_conn:
				send_notification(dsl, conn, error)
			# set the vars to current vals
			previous_conn = conn
			previous_dsl = dsl
			previous_error = error
		else:
			print "not a ptcl network"
	except:
		print "some error occurred."
	
	# sleep
	time.sleep(30)
